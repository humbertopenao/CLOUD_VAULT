---
- name: Check for existing Vault binary
  command: which vault
  register: vault_command
  failed_when: vault_command.rc not in [0,1]
  environment:
    PATH: "{{ vault_bin_dir }}:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin"

- name: Check for current Vault version present
  when: vault_command.rc == 0
  shell: vault -version | awk '{ print $2 }' | tr -d 'v'
  register: vault_cur_version
  environment:
    PATH: "{{ vault_bin_dir }}:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin"

- name: Create Vault group
  group:
    name: "{{ vault_group }}"
    system: yes

- name: Create Vault user
  user:
    name: "{{ vault_user }}"
    system: yes
    group: "{{ vault_group }}"
    create_home: no
    home: "{{ vault_home_dir }}"
    shell: "{{ vault_shell }}"

- name: Create Vault $HOME directory
  file:
    state: directory
    path: "{{ vault_home_dir }}"
    mode: 0750
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"

- name: Create Vault working directories
  file:
    state: directory
    path: "{{ item }}"
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: 0750
    recurse: yes
  with_items:
    - "{{ vault_config_dir }}"
    - "{{ vault_data_dir }}"
    - "{{ vault_runtime_dir }}"
    - "{{ vault_audit_dir }}"

- name: Create Vault binary directory
  file:
    state: directory
    path: "{{ vault_bin_dir }}"
    owner: root
    group: root
    mode: 0755

- name: Download Vault {{ vault_version }}
  when:
    vault_command.rc != 0 or
    (vault_command.rc == 0 and vault_cur_version.stdout != vault_version)
  get_url:
    url: "{{ vault_url }}"
    dest: /tmp/{{ vault_url | basename }}
    mode: 0644
  register: vault_download

- name: Extract Vault zip file
  unarchive:
    src: /tmp/{{ vault_url | basename }}
    remote_src: yes
    dest: "{{ vault_bin_dir }}"
    mode: 0755
    owner: root
    group: root
  when: vault_download.changed

- name: Remove Vault zip file
  file:
    state: absent
    path: /tmp/{{ vault_url | basename }}
  when: vault_download.changed

- name: Check for Systemd system
  command: which systemctl
  failed_when: False
  register: systemd_system

- name: Check for Vault binary present
  command: which vault
  failed_when: False
  register: vault_binary
  environment:
    PATH: "{{ vault_bin_dir }}:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin"

- name: Create Vault tmpfiles config
  register: tmpfiles_conf
  template:
    src: templates/tmpfiles.conf.j2
    dest: /etc/tmpfiles.d/vault.conf
    mode: 0755
    owner: root
    group: root
  when: systemd_system.rc == 0

- name: Apply changes to Vault tmpfiles config
  command: systemd-tmpfiles --create
  when: tmpfiles_conf.changed

- name: Create Vault Systemd service file (Systemd systems)
  when: vault_binary.rc == 0 and systemd_system.rc == 0
  template:
    src: templates/vault.service.j2
    dest: /etc/systemd/system/vault.service
    mode: 0644
    owner: root
    group: root
  register: vault_systemd_service

- name: Create Vault Systemd service file (SysV systems)
  when: vault_binary.rc == 0 and systemd_system.rc != 0
  template:
    src: templates/vault-init.j2
    dest: /etc/init.d/vault
    mode: 0755
    owner: root
    group: root

- name: Recargar systemd    
  command: systemctl daemon-reload
  when: vault_systemd_service.changed
